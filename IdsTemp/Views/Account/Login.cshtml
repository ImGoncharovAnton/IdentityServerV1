@model IdsTemp.Models.Account.LoginViewModel
<partial name="_ValidationSummary"/>
<div class="auth-page">

    @if (Model.EnableLocalLogin)
    {
        <div class="auth-main-block">
            <div class="heading-block">
                <h2 class="auth-heading">Welcome back</h2>
                <span class="auth-description">Please enter your details</span>
            </div>
            <form asp-route="Login" class="auth-inputs-block">
                @*<div asp-validation-summary="ModelOnly" class="text-danger"></div>*@
                <input type="hidden" asp-for="ReturnUrl"/>

                <div class="auth-input-block">
                    <input class="input-validation-error common-input auth-input"
                           placeholder="Email"
                           asp-for="Username"
                           autofocus minlength="4"
                           maxlength="50">
                    <span asp-validation-for="Username" class="auth-input-asp-validation"></span>
                </div>
                <div class="auth-input-block">
                    <input type="password"
                           placeholder="Password"
                           name="password"
                           id="password"
                           class="input-validation-error common-input auth-input"
                           asp-for="Password" autocomplete="off">
                    <i class="bi bi-eye-slash auth-toggle-password"
                       id="togglePassword">
                    </i>
                    <span asp-validation-for="Password" class="auth-input-asp-validation"></span>
                </div>
                @*  @if (Model.AllowRememberLogin)
                        {
                            <div class="form-group">
                                <div class="form-check">
                                    <input class="form-check-input" asp-for="RememberLogin">
                                    <label class="form-check-label" asp-for="RememberLogin" style="font-weight: 400;font-size: 14px;color: #6C6F7B;">
                                        Remember me
                                    </label>
                                </div>
                            </div>
                        }*@
                <button name="button" value="login"
                        type="submit" id="submit"
                        class="auth-button">
                    LOGIN
                </button>
            </form>

            <a href="@Url.Action("Register", new { Model.ReturnUrl })"
               class="auth-link">
                Create account
            </a>
        </div>
    }

    @if (Model.VisibleExternalProviders.Any())
    {
        <div class="col-sm-6">
            <div class="card">
                <div class="card-header">
                    <h2>External Account</h2>
                </div>
                <div class="card-body">
                    <ul class="list-inline">
                        @foreach (var provider in Model.VisibleExternalProviders)
                        {
                            <li class="list-inline-item">
                                <a class="btn btn-secondary"
                                   asp-controller="External"
                                   asp-action="Challenge"
                                   asp-route-scheme="@provider.AuthenticationScheme"
                                   asp-route-returnUrl="@Model.ReturnUrl">
                                    @provider.DisplayName
                                </a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    }

    @if (!Model.EnableLocalLogin && !Model.VisibleExternalProviders.Any())
    {
        <div class="alert alert-warning">
            <strong>Invalid login request</strong>
            There are no login schemes configured for this request.
        </div>
    }

</div>
<script>
    const togglePassword = document
        .querySelector('#togglePassword');
  
    const password = document.querySelector('#password');
  
    togglePassword.addEventListener('click', () => {
  
        const type = password
            .getAttribute('type') === 'password' ?
            'text' : 'password';
                  
        password.setAttribute('type', type);
  
        this.classList.toggle('bi-eye');
    });
</script>